1
00:00:00,260 --> 00:00:01,690
Здравствуйте, мои друзья.

2
00:00:01,700 --> 00:00:05,630
В этом видео я расскажу о вторичных конструкторах.

3
00:00:05,930 --> 00:00:11,250
Конструктор — это краткий способ инициализации свойств класса.

4
00:00:11,270 --> 00:00:18,820
Это специальная функция-член, которая вызывается при создании экземпляра объекта.

5
00:00:18,830 --> 00:00:22,640
Однако то, как они работают в Kotlin, немного отличается.

6
00:00:22,670 --> 00:00:29,240
В Kotlin есть два конструктора: первичный конструктор и вторичный конструктор.

7
00:00:29,270 --> 00:00:36,110
Первичный конструктор — это краткий способ инициализации класса, в то время как вторичный конструктор позволяет

8
00:00:36,110 --> 00:00:40,040
позволяет добавить дополнительную логику инициализации.

9
00:00:40,140 --> 00:00:47,990
Мы видели в предыдущем видео первичный конструктор, который является частью заголовка класса.

10
00:00:48,630 --> 00:00:49,340
Вот так.

11
00:00:49,390 --> 00:00:50,310
Этот пример.

12
00:00:50,310 --> 00:00:55,080
У нас есть два аргумента: имя и возраст.

13
00:00:55,080 --> 00:01:03,080
Итак, мне нужно, если мне нужно создать человека, я должен сначала передать имя, а затем возраст.

14
00:01:03,090 --> 00:01:09,780
Таким образом, мы соблюдаем тип и порядок этих переменных.

15
00:01:09,810 --> 00:01:13,930
Хорошо, это два свойства.

16
00:01:13,950 --> 00:01:17,520
Теперь блоки инициализатора.

17
00:01:17,550 --> 00:01:25,770
Первичный конструктор имеет ограниченный синтаксис и не может содержать никакого кода.

18
00:01:25,770 --> 00:01:34,470
Это очень важный момент, чтобы поместить код инициализации, а не только код для инициализации свойств.

19
00:01:34,470 --> 00:01:36,870
Используется блок инициализатора.

20
00:01:36,870 --> 00:01:41,490
Мы видели в предыдущем видео, как мы использовали init.

21
00:01:41,520 --> 00:01:42,360
Это.

22
00:01:42,390 --> 00:01:46,620
Он имеет префикс init, ключевое слово инициализатора.

23
00:01:46,620 --> 00:01:48,940
Давайте изменим этот код.

24
00:01:48,940 --> 00:02:00,490
Это инициализированный инициализатор println и print l n, и я поставлю здесь we l n здесь, и я буду использовать

25
00:02:00,520 --> 00:02:05,020
мы использовали инициализатор.

26
00:02:06,010 --> 00:02:06,790
Хорошо.

27
00:02:07,660 --> 00:02:07,820
Хорошо.

28
00:02:08,160 --> 00:02:13,260
Когда мы запустим программу, я создам здесь человека внутри Hello World.

29
00:02:13,290 --> 00:02:14,370
Hello Kotlin.

30
00:02:15,480 --> 00:02:16,500
Var.

31
00:02:17,620 --> 00:02:21,310
Пусть один человек, один равен человеку.

32
00:02:21,310 --> 00:02:32,530
И я поставлю здесь Джеффа, и я поставлю здесь возраст.

33
00:02:32,740 --> 00:02:33,940
А потом.

34
00:02:37,650 --> 00:02:48,420
Если я нажму «Выполнить», не вызывая никакого метода, и мы посмотрим на Logcat, мы увидим имя человека Джефф,

35
00:02:48,450 --> 00:02:57,360
возраст человека 27 лет, и мы использовали сообщения инициализатора в этом журнале.

36
00:02:57,450 --> 00:03:09,270
Итак, они выполняются всякий раз, когда мы создаем объект этого класса person.

37
00:03:09,300 --> 00:03:10,080
Хорошо.

38
00:03:10,170 --> 00:03:18,810
Итак, класс person имеет два свойства, имя и возраст, когда создается объект person 1P1.

39
00:03:18,810 --> 00:03:19,940
создается.

40
00:03:19,950 --> 00:03:24,540
Выполняется код внутри блока инициализатора.

41
00:03:24,540 --> 00:03:32,190
Блок инициализатора не только инициализирует свои свойства, но и печатает их.

42
00:03:32,400 --> 00:03:40,480
Хорошо, вот как мы используем инициализаторы и конструкторы в Kotlin.

43
00:03:41,410 --> 00:03:51,130
Я должен упомянуть здесь очень важное замечание для первичного конструктора, что в первичном конструкторе есть значение по умолчанию.

44
00:03:51,130 --> 00:03:58,300
в первичном конструкторе, поэтому вы можете предоставить значение по умолчанию для параметров конструктора, аналогично предоставлению

45
00:03:58,300 --> 00:04:00,200
аргументы по умолчанию для функций.

46
00:04:00,220 --> 00:04:13,540
Например, если я укажу здесь для возраста, я могу сделать вот так равно нулю, я могу указать

47
00:04:13,540 --> 00:04:15,490
значение по умолчанию для возраста.

48
00:04:15,490 --> 00:04:18,520
Кстати, я могу удалить var.

49
00:04:18,670 --> 00:04:32,290
Итак, если я создам здесь, упс, если я создам здесь объект или экземпляр класса person и

50
00:04:32,290 --> 00:04:37,240
без указания его возраста, я могу проверить это.

51
00:04:37,270 --> 00:04:38,470
Например.

52
00:04:38,470 --> 00:04:44,170
Итак, позвольте мне показать вам напрямую p two равно person.

53
00:04:44,470 --> 00:04:48,040
И я поставил здесь Джека.

54
00:04:48,460 --> 00:04:49,150
Хорошо.

55
00:04:49,150 --> 00:04:52,660
Итак, P two даст мне это.

56
00:04:52,730 --> 00:04:55,570
Возраст Джека равен нулю.

57
00:04:55,570 --> 00:05:01,810
Итак, значение возраста person two по умолчанию равно нулю.

58
00:05:01,840 --> 00:05:08,230
Видите, мы можем установить значение по умолчанию для параметров.

59
00:05:08,350 --> 00:05:09,010
Хорошо.

60
00:05:09,130 --> 00:05:13,120
Теперь давайте поговорим о вторичных конструкторах Kotlin.

61
00:05:13,780 --> 00:05:19,360
В Kotlin класс также может содержать один или несколько вторичных конструкторов.

62
00:05:19,390 --> 00:05:23,590
Они создаются с помощью ключевого слова constructor.

63
00:05:23,620 --> 00:05:28,390
Вторичные конструкторы не распространены в Kotlin.

64
00:05:28,420 --> 00:05:36,970
Наиболее частое использование вторичного конструктора возникает, когда вам нужно расширить класс, который предоставляет

65
00:05:36,970 --> 00:05:42,010
несколько конструкторов для инициализации класса различными способами.

66
00:05:42,040 --> 00:05:46,470
Обязательно ознакомьтесь с наследованием Kotlin, прежде чем изучать его.

67
00:05:46,480 --> 00:05:47,860
Хорошо, значит.

68
00:05:48,920 --> 00:05:54,530
Чтобы создать вторичный конструктор, мы начинаем с ключевого слова constructor.

69
00:05:54,800 --> 00:05:55,550
Хорошо.

70
00:05:55,550 --> 00:06:02,090
И мы должны использовать его внутри наследуемых классов.

71
00:06:02,510 --> 00:06:11,120
Так, например, мы используем конструкторы с вторичными конструкторами, где есть наследование

72
00:06:11,120 --> 00:06:18,880
и у вас нет первичных конструкторов в суперклассе.

73
00:06:18,890 --> 00:06:19,430
Хорошо.

74
00:06:19,430 --> 00:06:20,630
Вот так.

75
00:06:23,080 --> 00:06:24,370
Мне удалить это?

76
00:06:24,400 --> 00:06:26,350
Конструктор здесь.

77
00:06:26,350 --> 00:06:29,110
Я начну с имени.

78
00:06:31,600 --> 00:06:34,660
Этого типа, string и age.

79
00:06:34,690 --> 00:06:36,040
Типа.

80
00:06:37,010 --> 00:06:45,470
И хорошо, это конструктор, и мы указываем здесь код этого конструктора.

81
00:06:46,220 --> 00:06:55,580
Забудьте об этих функциях, и я просто покажу вам вторичные и первичные конструкторы.

82
00:06:55,610 --> 00:06:56,330
Хорошо.

83
00:06:56,480 --> 00:07:05,540
Если игрок, если мы откроем здесь игрока, я должен удалить эти аргументы.

84
00:07:06,200 --> 00:07:07,040
Хорошо.

85
00:07:07,670 --> 00:07:09,460
Эти параметры.

86
00:07:09,470 --> 00:07:18,080
Кроме того, я удалю это и введу конструктор для имени.

87
00:07:19,720 --> 00:07:37,150
Список типа string и age типа int. И здесь мы ставим super и получаем имя и возраст из

88
00:07:37,150 --> 00:07:39,100
суперкласса, хорошо?

89
00:07:39,100 --> 00:07:46,000
А здесь мы помещаем конструктор вторичного конструктора.

90
00:07:46,000 --> 00:07:56,500
Это код, в котором мы инициализируем, например, мы указываем здесь, что мы использовали вторичный конструктор.

91
00:07:56,530 --> 00:08:03,430
Используется вторичный конструктор.

92
00:08:03,460 --> 00:08:05,380
Хорошо, это.

93
00:08:06,450 --> 00:08:08,370
Вторичный конструктор.

94
00:08:08,370 --> 00:08:18,870
Вы должны упомянуть об этом, когда у вас есть наследование, а у родительского класса нет первичного конструктора.

95
00:08:18,870 --> 00:08:21,270
Но это не распространено в Kotlin.

96
00:08:21,270 --> 00:08:29,220
Я хочу, чтобы вы поняли, что мы используем этот тип конструкторов, вторичные конструкторы,

97
00:08:29,460 --> 00:08:36,900
когда у вас есть наследование, и у нас нет первичных конструкторов.

98
00:08:36,930 --> 00:08:37,230
Хорошо.

99
00:08:37,230 --> 00:08:38,610
В родительском классе.